[{"title":"Ansible","type":0,"sectionRef":"#","url":"api/Ansible","content":"On this page Ansible The root class is a Socket factory. Indexing it by a string lazily provides a named socket with that name like so: socket[&quot;DoRemote&quot;]:Connect(listener) -- Connects a listener socket[&quot;DoRemote&quot;]:FireServer() -- Fires the server side of the socket ","keywords":""},{"title":"Connection","type":0,"sectionRef":"#","url":"api/Connection","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Connection","url":"api/Connection#properties","content":" "},{"title":"Connected​","type":1,"pageTitle":"Connection","url":"api/Connection#Connected","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Connection.Connected: bool A read-only field indicating whether or not the connection is connected "},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"api/Connection#functions","content":" "},{"title":"Disconnect​","type":1,"pageTitle":"Connection","url":"api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → () Disconnects the connection "},{"title":"Socket","type":0,"sectionRef":"#","url":"api/Socket","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Socket","url":"api/Socket#functions","content":" "},{"title":"FireServer​","type":1,"pageTitle":"Socket","url":"api/Socket#FireServer","content":"This item only works when running on the client. Client &lt;/&gt; Socket:FireServer( ...?: any-- the parameters to pass to any listeners ) → () Fires the event on the server  "},{"title":"InvokeServerNonblocking​","type":1,"pageTitle":"Socket","url":"api/Socket#InvokeServerNonblocking","content":"This item only works when running on the client. Client &lt;/&gt; Socket:InvokeServerNonblocking( callback: (...any) → (), ...?: any-- the parameters to pass to the remote function ) → () Invokes the remote function on the server asynchronously, taking a callback to handle the return values  "},{"title":"InvokeServer​","type":1,"pageTitle":"Socket","url":"api/Socket#InvokeServer","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Socket:InvokeServer( ...?: any-- the parameters to pass to the remote function ) → ...any-- the results of the remote function Invokes the remote function on the server and blocks on it  "},{"title":"FireClient​","type":1,"pageTitle":"Socket","url":"api/Socket#FireClient","content":"This item only works when running on the server. Server &lt;/&gt; Socket:FireClient( player: Player ,-- the player whom to fire the event for ...?: any-- the parameters to pass to any listeners ) → () Fires the event on the given client  "},{"title":"FireAllClients​","type":1,"pageTitle":"Socket","url":"api/Socket#FireAllClients","content":"This item only works when running on the server. Server &lt;/&gt; Socket:FireAllClients( ...?: any-- the parameters to pass to any listeners ) → () Fires the event on all connected clients  "},{"title":"InvokeClientNonblocking​","type":1,"pageTitle":"Socket","url":"api/Socket#InvokeClientNonblocking","content":"This item only works when running on the server. Server &lt;/&gt; Socket:InvokeClientNonblocking( client: Player ,-- the client on whom to invoke the remote function callback: (...any) → (), ...?: any-- the parameters to pass to the remote function ) → () Invokes the remote function on the given client asynchronously taking a callback to handle the return values  "},{"title":"InvokeAllClientsNonblocking​","type":1,"pageTitle":"Socket","url":"api/Socket#InvokeAllClientsNonblocking","content":"This item only works when running on the server. Server &lt;/&gt; Socket:InvokeAllClientsNonblocking( callback: (...any) → (), ...?: any-- the parameters to pass to the remote function ) → () Invokes the remote function on all clients asynchronously taking a callback to handle the return values  "},{"title":"InvokeClient​","type":1,"pageTitle":"Socket","url":"api/Socket#InvokeClient","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Socket:InvokeClient( client: Player ,-- the player on whom to invoke the remote function ...?: any-- the parameters to pass to the remote function ) → () Invokes the remote function on the given client and blocks on it  "},{"title":"SetCallback​","type":1,"pageTitle":"Socket","url":"api/Socket#SetCallback","content":"This item only works when running on the server. Server &lt;/&gt; Socket:SetCallback(callback: ( Player , ...any ) → (...any)) → () Sets the callback handler for this side of the socket's remote function  "},{"title":"SetCallback​","type":1,"pageTitle":"Socket","url":"api/Socket#SetCallback","content":"This item only works when running on the client. Client &lt;/&gt; Socket:SetCallback(callback: (...any) → (...any)) → () Sets the callback handler for this side of the socket's remote function  "},{"title":"Connect​","type":1,"pageTitle":"Socket","url":"api/Socket#Connect","content":"This item only works when running on the server. Server &lt;/&gt; Socket:Connect(listener: ( Player , ...any ) → ()) → Connection Connects a listener to the socket  "},{"title":"Connect​","type":1,"pageTitle":"Socket","url":"api/Socket#Connect","content":"This item only works when running on the client. Client &lt;/&gt; Socket:Connect(listener: (...any) → ()) → Connection Connects a listener to the socket  "},{"title":"Wait​","type":1,"pageTitle":"Socket","url":"api/Socket#Wait","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Socket:Wait() → ( Player , ...any )-- the return values of the listener Blocks on the socket  "},{"title":"Wait​","type":1,"pageTitle":"Socket","url":"api/Socket#Wait","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Socket:Wait() → ...any-- the return values of the listener Blocks on the socket "}]